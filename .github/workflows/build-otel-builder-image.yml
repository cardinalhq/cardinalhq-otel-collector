# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go


name: Build OTEL builder image (pre-build)
on:
  workflow_dispatch:

jobs:

  env-setup:
    runs-on: ubuntu-latest
    # *** these need to match ***
    environment: dev

    outputs:
      GO_VERSION: ${{ steps.set-output-defaults.outputs.GO_VERSION }}
      IMAGE_REGISTRY: ${{ steps.set-output-defaults.outputs.IMAGE_REGISTRY }}
      LATEST_TAG: ${{ steps.set-output-defaults.outputs.LATEST_TAG }}
      TODAY_TAG:  ${{ steps.set-output-defaults.outputs.TODAY_TAG }}
      SHOULD_USE_PUBLIC_ECR: ${{ steps.set-output-defaults.outputs.SHOULD_USE_PUBLIC_ECR }}
      CURRENT_ENVIRONMENT: ${{ steps.set-output-defaults.outputs.CURRENT_ENVIRONMENT }}
      RELEASE_TYPE: ${{ steps.set-output-defaults.outputs.RELEASE_TYPE }}
      array-docker-context: ${{ steps.set-matrix.outputs.array-docker-context}}
      array-image-config: ${{ steps.set-matrix.outputs.array-image-config}}
    steps:
      - name: set outputs with default values
        env:
          # *** these need to match ***
          ENVIRONMENT: dev
          GO_VERSION: ${{ vars.GO_VERSION }}
          SHOULD_USE_PUBLIC_ECR: true
          RELEASE_TYPE: RELEASE_CANDIDATE
          REPOSITORY_NAME: ${{ vars.REPOSITORY_NAME }}

        id: set-output-defaults
        run: |
          echo "GO_VERSION=${{ env.GO_VERSION }}" >> $GITHUB_OUTPUT
          echo "IMAGE_REGISTRY=public.ecr.aws/cardinalhq.io/" >> $GITHUB_OUTPUT

          if [ "${{ env.ENVIRONMENT }}" = "prod" ]; then
            echo "LATEST_TAG=builder-latest" >> $GITHUB_OUTPUT
          elif [ "${{ env.ENVIRONMENT }}" = "test" ]; then
            echo "LATEST_TAG=builder-latest" >> $GITHUB_OUTPUT
          elif [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
            echo "LATEST_TAG=builder-latest" >> $GITHUB_OUTPUT
          else
            echo "LATEST_TAG=$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT  # Default to timestamp if no latest tag
          fi          
          echo "TODAY_TAG=$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT  

          echo "SHOULD_USE_PUBLIC_ECR=${{ env.SHOULD_USE_PUBLIC_ECR }}" >> $GITHUB_OUTPUT
          echo "CURRENT_ENVIRONMENT=${{ env.ENVIRONMENT }}" >>  $GITHUB_OUTPUT
          echo "RELEASE_TYPE=${{ env.RELEASE_TYPE }}" >>  $GITHUB_OUTPUT

      - name: Generate matrix
        id: set-matrix
        run: |
          # array_docker_context elements are <relativePathToDockerFile>|<imageRepositoryName>
          array_docker_context='.|${{ env.REPOSITORY_NAME }}'
          echo "array-docker-context=$array_docker_context" >> $GITHUB_OUTPUT
          # image_registry elements are <image_registry_id>|<imageRegistryURl(blank for private ecr)|boolShouldUsePublicECR>
          image_registry='aws|${{ steps.set-output-defaults.outputs.IMAGE_REGISTRY }}|${{ steps.set-output-defaults.outputs.SHOULD_USE_PUBLIC_ECR }}'

          array_image_config='["'"$image_registry"'"]'
          echo "array-image-config=$array_image_config" >> $GITHUB_OUTPUT



      - name: print outputs
        id: print-outputs
        run: |
          echo 'GO_VERSION=${{ steps.set-output-defaults.outputs.GO_VERSION }}'
          echo 'LATEST_TAG=${{ steps.set-output-defaults.outputs.LATEST_TAG }}'
          echo 'SHOULD_USE_PUBLIC_ECR=${{ steps.set-output-defaults.outputs.SHOULD_USE_PUBLIC_ECR }}'
          echo 'CURRENT_ENVIRONMENT=${{ steps.set-output-defaults.outputs.CURRENT_ENVIRONMENT }}'
          echo 'RELEASE_TYPE=${{ steps.set-output-defaults.outputs.RELEASE_TYPE }}'
          echo 'array-docker-context=${{ steps.set-matrix.outputs.array-docker-context }}'
          echo 'array_image_config=${{ steps.set-matrix.outputs.array_image_config }}'




  build-release-artifacts:
    needs: [ env-setup ]
    if: ${{ needs.release-tag.outputs.tag != '' }}

    name: Build and release images
    uses: ./.github/workflows/z-docker-build-push-ecr-go.yml
    permissions:
      id-token: write
      contents: read
    with:
      tag-to-release: ${{ needs.release-tag.outputs.TODAY_TAG }}
      latest-tag: ${{  needs.env-setup.outputs.LATEST_TAG }}
      array-docker-context: ${{ needs.env-setup.outputs.array-docker-context }}
      array-image-config: ${{ needs.env-setup.outputs.array-image-config }}
    secrets:
      ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
      ECR_ROLE_NAME: ${{ secrets.ECR_ROLE_NAME }}
      ECR_REGISTRY_REGION: ${{ secrets.ECR_REGISTRY_REGION }}
      GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}



