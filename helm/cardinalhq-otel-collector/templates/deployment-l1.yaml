apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "customerside.labels" . | nindent 4 }}
    app.kubernetes.io/component: collector-l1
  {{- include "customerside.deployment.annotations" . | nindent 2 }}
  name: {{ include "customerside.fullname" . }}-l1
  {{- include "customerside.namespace" . | nindent 2 }}
spec:
  replicas: {{ .Values.collector.l1.replicas | default 2 }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      {{- include "customerside.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: collector-l1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "customerside.labels" . | nindent 8 }}
        app.kubernetes.io/component: collector-l1
    spec:
      serviceAccountName: {{ include "customerside.fullname" . }}-loadbalancer
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        runAsGroup: 2000
        fsGroup: 2000
      containers:
        - name: collector
          image: "{{ .Values.collector.l1.image.repository }}:{{ .Values.collector.l1.image.tag }}"
          command:
            - "/app/bin/cardinalhq-otel-collector"
            - "--config=/app/config/config.yaml"
            - "--feature-gates=component.UseLocalHostAsDefaultHost"
          env:
{{- if .Values.collector.l1.env.gomemlimit }}
            - name: GOMEMLIMIT
              value: "{{ .Values.collector.l1.env.gomemlimit }}"
{{- end }}
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
              value: "Delta"
            - name: DATADOG_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "customerside.secret.datadog.name" . }}
                  key: {{ .Values.secrets.datadog.field }}
            - name: CARDINALHQ_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "customerside.secret.cardinalhq.name" . }}
                  key: {{ .Values.secrets.cardinalhq.field }}
            - name: CARDINALHQ_CUSTOMER_ID
              value: {{ .Values.identity.customerId }}
            - name: CARDINALHQ_CLUSTER_ID
              value: {{ .Values.identity.clusterId }}
{{ if .Values.s3.enabled }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "customerside.secret.aws.name" . }}
                  key: {{ .Values.secrets.aws.accessKeyField }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "customerside.secret.aws.name" . }}
                  key: {{ .Values.secrets.aws.secretKeyField }}
{{ end }}
          ports:
            - name: otlp
              containerPort: 4317
              protocol: TCP
            - name: http
              containerPort: 4318
              protocol: TCP
            - name: datadog
              containerPort: 8126
              protocol: TCP
            - name: zpages
              containerPort: {{ .Values.collector.endpoints.zpages.port }}
              protocol: TCP
            - name: healthz
              containerPort: {{ .Values.collector.endpoints.healthz.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: {{ .Values.collector.endpoints.healthz.path }}
              port: {{ .Values.collector.endpoints.healthz.port }}
            initialDelaySeconds: 10
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
{{- if .Values.collector.l1.resources }}
          resources:
{{ toYaml .Values.collector.l1.resources | indent 12 }}
{{- end }}
          volumeMounts:
            - name: config
              mountPath: /app/config
            - name: buffer-scratch
              mountPath: /app/scratch
      restartPolicy: Always
      volumes:
        - name: config
          configMap:
            name: {{ include "customerside.fullname" . }}-l1
        - name: buffer-scratch
          ephemeral:
            volumeClaimTemplate:
              metadata:
                labels:
                  {{- include "customerside.labels" . | nindent 18 }}
                  app.kubernetes.io/component: collector-l1
                {{- include "customerside.pvc.annotations" . | nindent 16 }}
              spec:
                accessModes: [ "ReadWriteOnce" ]
                {{ if .Values.collector.l1.pvc.storageClassName }}
                storageClassName: {{ .Values.collector.l1.pvc.storageClassName }}
                {{ end }}
                resources:
                  requests:
                    storage: {{ .Values.collector.l1.pvc.size }}
