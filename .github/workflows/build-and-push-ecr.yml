# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go


name: z_internal Build and push a specific tag to ecr

on:
  workflow_call:
    inputs:
      tag-to-release:
        type: string
        required: true
      registry:
        type: string
        required: true
      repository:
        type: string
        required: true
      public-registry:
        type: boolean
        required: true
        default: false
      should-tag-latest:
        type: string
        required: true
    secrets:
      ECR_ACCOUNT_ID:
        required: true
      ECR_ROLE_NAME:
        required: true
      ECR_REGISTRY_REGION:
        required: true

jobs:

  build-and-push-to-ecr:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
          ref: ${{ inputs.tag-to-release }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Find all go.mod files
        id: find-modules
        run: |
          # Find all directories containing go.mod files
          MOD_DIRS=$(find . -name 'go.mod' -exec dirname {} \;)
          echo "MOD_DIRS<<EOF" >> $GITHUB_ENV
          echo "$MOD_DIRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Build and test each module
        id: build-modules
        run: |
          
          MODULE_SOURCE_PATHS=$MOD_DIRS
          for i in $MODULE_SOURCE_PATHS; do \
            (echo ============ generating $i ... ; cd $i && go generate -v -n -x ./...)
          done
          
          for i in $MODULE_SOURCE_PATHS; do \
            (echo ============ building $i ... ; cd $i && go build ./...)
          done
          
          for i in $MODULE_SOURCE_PATHS; do \
            (echo ============ testing $i ... ; cd $i && go test ./...)
          done


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          audience: sts.amazonaws.com
          role-to-assume: arn:aws:iam::${{ secrets.ECR_ACCOUNT_ID }}:role/${{ secrets.ECR_ROLE_NAME }}
          aws-region: ${{ secrets.ECR_REGISTRY_REGION }}
          role-session-name: GitHubActions

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx


      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"



      - name: Login to PUBLIC Amazon ECR
        if: ${{ inputs.public-registry }}
        env:
          AWS_REGION: us-east-1
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to PRIVATE Amazon ECR
        if: ${{ !inputs.public-registry }}
        id: login-ecr-private
        uses: aws-actions/amazon-ecr-login@v2


      - name: Build and push (latest)
        if: ${{ inputs.should-tag-latest == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          build-args: |
            GIT_BRANCH=${{ inputs.tag-to-release }}
            BUILDER_REPO=${{ inputs.registry }}${{ inputs.repository }}
          tags: |
            ${{ inputs.registry }}${{ inputs.repository }}:latest
            ${{ inputs.registry }}${{ inputs.repository }}:${{ inputs.tag-to-release }}

      - name: Build and push
        if: ${{ inputs.should-tag-latest != 'true' }}
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          build-args: |
            GIT_BRANCH=${{ inputs.tag-to-release }}
            BUILDER_REPO=${{ inputs.registry }}${{ inputs.repository }}
          tags: |
            ${{ inputs.registry }}${{ inputs.repository }}:${{ inputs.tag-to-release }}
