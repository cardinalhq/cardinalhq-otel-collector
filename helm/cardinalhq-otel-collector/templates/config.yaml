apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "customerside.labels" . | nindent 4 }}
    app.kubernetes.io/component: collector
  {{- include "customerside.configMap.annotations" . | nindent 2 }}
  name: {{ include "customerside.fullname" . }}
  {{- include "customerside.namespace" . | nindent 2 }}
data:
  config.yaml: |-
    receivers:
      # Default receivers for the collector.
      {{- range $index, $config := .Values.collector.defaultReceivers }}
      {{- if $config.enabled }}
      {{ $config.name }}:
      {{- toYaml $config.config | nindent 8 }}
      {{- end }}
      {{- end }}

      # customer-added receivers
      {{- range $index, $config := .Values.collector.additionalReceivers }}
      {{- if $config.enabled }}
      {{ $config.name }}:
      {{- toYaml $config.config | nindent 8 }}
      {{- end }}
      {{- end }}
    exporters:
      nop:
      {{ range $name, $flags := .Values.vendors }}
      {{ if and $flags.enabled $flags.logs (not $flags.dryrun) -}}
      {{ $flags.exporter }}/{{ $name }}:
        {{ toYaml $flags.config | nindent 8 }}
      {{ end -}}
      {{ end }}
    
{{ if .Values.s3.enabled }}
      chqs3/lx:
      {{ include "customerside.chqs3.config" . | nindent 8 }}
{{ end }}

    processors:
      # Limit collector process memory usage.  This should be the first processor
      # in the processor list.
      memory_limiter/lx:
        limit_mib: {{ .Values.collector.memory_limiter.limit_mib }}
        spike_limit_mib: {{ .Values.collector.memory_limiter.spike_limit_mib }}
        check_interval: 5s

      batch/intakestats:
        timeout: 1s
        send_batch_size: 100
        send_batch_max_size: 1000

      {{ range $name, $flags := .Values.vendors -}}
      {{ if and $flags.enabled $flags.logs -}}
      batch/{{ $name }}:
        timeout: 1s
        send_batch_size: 100
        send_batch_max_size: 1000
      {{ end -}}
      {{ end -}}

      chqdecorator/lx:

      chqenforcer/intakestats:
        configuration_extension: chqconfig/cardinalhq
        drop_decoration_attributes: false
        metric_aggregation:
          interval: {{ $.Values.collector.aggregation.interval }}
        statistics:
          endpoint: {{ .Values.collector.endpoints.cardinalhq.stats }}
          auth:
            authenticator: chqauth/cardinalhq
          phase: presample
          vendor: intakestats
        traces:
          uninteresting_rate: 1000
          has_error_rate: 4

      {{ range $name, $flags := .Values.vendors -}}
      {{ if and $flags.enabled $flags.logs -}}
      chqenforcer/{{ $name }}:
        configuration_extension: chqconfig/cardinalhq
        {{ if $flags.keepTags }}
        drop_decoration_attributes: false
        {{ end }}
        metric_aggregation:
          interval: {{ $.Values.collector.aggregation.interval }}
        statistics:
          endpoint: {{ $.Values.collector.endpoints.cardinalhq.stats }}
          auth:
            authenticator: chqauth/cardinalhq
          phase: postsample
          vendor: {{ $name }}
        traces:
          uninteresting_rate: 1000
          has_error_rate: 4
      {{ end -}}
      {{ end }}

    connectors:
      forward/intakestats:
{{ if .Values.s3.enabled }}
      forward/chqs3:
      spanmetrics/lx:
        aggregation_temporality: "AGGREGATION_TEMPORALITY_DELTA"
        metrics_flush_interval: 10s
        namespace: span.metrics
{{ end }}
      {{ range $name, $flags := .Values.vendors -}}
      {{ if and $flags.enabled $flags.logs -}}
      forward/{{ $name }}:
      {{ end -}}
      {{ end }}
        
    service:
      pipelines:
        # log handling.  No need to partition here.
        logs/lx:
          receivers:
            - otlp/lx
            - chqdatadog/lx
            {{- range $key, $config := .Values.collector.additionalReceivers }}
            {{- if and $config.enabled $config.logs }}
            - {{ $config.name }}
            {{- end }}
            {{- end }}
          processors:
            - memory_limiter/lx
            - chqdecorator/lx
          exporters:
            - forward/intakestats
{{ if .Values.s3.enabled }}
            - chqs3/lx
{{ end }}
            {{ range $name, $flags := .Values.vendors -}}
            {{ if and $flags.enabled $flags.logs -}}
            - forward/{{ $name }}
            {{ end -}}
            {{ end }}
        logs/intakestats:
          receivers:
            - forward/intakestats
          processors:
            - chqenforcer/intakestats
          exporters:
            - nop
        {{ range $name, $flags := .Values.vendors }}
        {{ if and $flags.enabled $flags.logs -}}
        logs/{{ $name }}:
          receivers:
            - forward/{{ $name }}
          processors:
            - chqenforcer/{{ $name }}
            - batch/{{ $name }}
          exporters:
          {{ if $flags.dryrun }}
            - nop
          {{ else }}
            - {{ $flags.exporter}}/{{ $name }}
          {{ end }}
        {{ end -}}
        {{- end -}}

        metrics/lx:
          receivers:
            - otlp/lx
          processors:
            - memory_limiter/lx
            - cumulativetodelta/lx
            - chqdecorator/lx
          exporters:
            - forward/intakestats
{{ if .Values.s3.enabled }}
            - forward/chqs3
{{ end }}
            {{ range $name, $flags := .Values.vendors -}}
            {{ if and $flags.enabled $flags.metrics -}}
            - forward/{{ $name }}
            {{ end -}}
            {{ end }}
        metrics/intakestats:
          receivers:
            - forward/intakestats
          processors:
            - chqenforcer/intakestats
          exporters:
            - nop
        {{ range $name, $flags := .Values.vendors }}
        {{ if and $flags.enabled $flags.metrics -}}
        metrics/{{ $name }}:
          receivers:
            - forward/{{ $name }}
          processors:
            - chqenforcer/{{ $name }}
            - batch/{{ $name }}
          exporters:
          {{ if $flags.dryrun }}
            - nop
          {{ else }}
            - {{ $flags.exporter}}/{{ $name }}
          {{ end }}
        {{ end -}}
        {{- end -}}

{{ if .Values.s3.enabled }}
        metrics/lxs3:
          receivers:
            - forward/chqs3
          exporters:
            - chqs3/lx

        metrics/spanmetrics:
          receivers:
            - spanmetrics/lx
          processors:
            - chqdecorator/lx
          exporters:
            - forward/chqs3
{{ end }}

        traces/lx:
          receivers:
            - otlp/lx
          processors:
            - memory_limiter/lx
            - groupbytrace/lx
            - chqdecorator/lx
          exporters:
            - forward/intakestats
{{ if .Values.s3.enabled }}
            - spanmetrics/lx
            - chqs3/lx
{{ end }}
            {{ range $name, $flags := .Values.vendors -}}
            {{ if and $flags.enabled $flags.traces -}}
            - forward/{{ $name }}
            {{ end -}}
            {{ end }}

        traces/intakestats:
          receivers:
            - forward/intakestats
          processors:
            - chqenforcer/intakestats
          exporters:
            - nop
        {{ range $name, $flags := .Values.vendors }}
        {{ if and $flags.enabled $flags.traces -}}
        traces/{{ $name }}:
          receivers:
            - forward/{{ $name }}
          processors:
            - chqenforcer/{{ $name }}
            - batch/{{ $name }}
          exporters:
          {{ if $flags.dryrun }}
            - nop
          {{ else }}
            - {{ $flags.exporter}}/{{ $name }}
          {{ end }}
        {{ end -}}
        {{- end -}}

{{ if .Values.selfTelemetry.enabled }}
      {{ toYaml .Values.selfTelemetry.config | nindent 6 }}
{{ end }}

      extensions:
        - zpages
        - health_check
        - chqauth/cardinalhq
        - chqconfig/cardinalhq
        - file_storage/scratch

    extensions:
      zpages:
        endpoint: "0.0.0.0:{{ .Values.collector.endpoints.zpages.port }}"
      health_check:
        endpoint: "0.0.0.0:{{ .Values.collector.endpoints.healthz.port }}"
        path: {{ .Values.collector.endpoints.healthz.path }}
      chqauth/cardinalhq:
        client_auth:
          api_key: ${env:CARDINALHQ_API_KEY}
          environment:
            collector_id: ${env:CARDINALHQ_COLLECTOR_ID}
            customer_id: ${env:CARDINALHQ_CUSTOMER_ID}
      chqconfig/cardinalhq:
        source:
          endpoint: {{ .Values.collector.endpoints.cardinalhq.samplerConfig }}
          auth:
            authenticator: chqauth/cardinalhq
      file_storage/scratch:
        directory: /app/scratch
