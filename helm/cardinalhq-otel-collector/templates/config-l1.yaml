apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "customerside.labels" . | nindent 4 }}
    app.kubernetes.io/component: collector-l1
  {{- include "customerside.configMap.annotations" . | nindent 2 }}
  name: {{ include "customerside.fullname" . }}-collector-config-l1
  {{- include "customerside.namespace" . | nindent 2 }}
data:
  config.yaml: |-
    receivers:
      otlp/l1:
        protocols:
          grpc:
            endpoint: 0.0.0.0:{{ .Values.collector.ports.incoming.otlpGRPCPort }}
          http:
            endpoint: 0.0.0.0:{{ .Values.collector.ports.incoming.otlpHTTPPort }}
      chqdatadog/l1:
        endpoint: 0.0.0.0:{{ .Values.collector.ports.incoming.datadogPort }}

    exporters:
      nop:
      loadbalancing/metrics:
        routing_key: "metric"
        protocol:
          otlp:
            tls:
              insecure: true
            sending_queue:
              queue_size: 2000
            retry_on_failure:
              enabled: true
              max_elapsed_time: 1m
              initial_interval: 1s
              max_interval: 10s
        resolver:
          k8s:
            service: "{{ include "customerside.fullname" . }}-collector-l2.${env:POD_NAMESPACE}"
            ports:
              - {{ .Values.collector.ports.internal.otlpGRPCPort }}
      loadbalancing/traces:
        routing_key: "traceID"
        protocol:
          otlp:
            tls:
              insecure: true
            sending_queue:
              queue_size: 2000
            retry_on_failure:
              enabled: true
              max_elapsed_time: 1m
              initial_interval: 1s
              max_interval: 10s
        resolver:
          k8s:
            service: "{{ include "customerside.name" . }}-collector-l2.${env:POD_NAMESPACE}"
            ports:
              - {{ .Values.collector.ports.internal.otlpGRPCPort }}
      chqdatadog/datadog:
        api_key: ${env:DATADOG_API_KEY}
        metrics:
          endpoint: {{ .Values.collector.endpoints.datadog.metrics }}
          compression: {{ .Values.collector.endpoints.datadog.compression }}
        logs:
          endpoint: {{ .Values.collector.endpoints.datadog.logs }}
          compression: {{ .Values.collector.endpoints.datadog.compression }}
        traces:
          endpoint: {{ .Values.collector.endpoints.datadog.traces }}
          compression: {{ .Values.collector.endpoints.datadog.compression }}

      otlp/cardinalhq:
        endpoint: {{ .Values.collector.endpoints.cardinalhq.otlpGRPC}}
        auth:
          authenticator: chqauth/cardinalhq

    processors:
      # Limit collector process memory usage.  This should be the first processor
      # in the processor list.
      memory_limiter/l1:
        limit_mib: 1500
        spike_limit_mib: 100
        check_interval: 5s

      # Batch processors to limit the size and/or timeframe that telemetry
      # is batched before being sent to the exporters.  This should be
      # the last item in the processor list.
      batch/cardinalhq:
        timeout: 1s
        send_batch_size: 100
        send_batch_max_size: 1000
      batch/datadog:
        timeout: 1s
        send_batch_size: 100
        send_batch_max_size: 1000
      batch/intakestats:
        timeout: 1s
        send_batch_size: 100
        send_batch_max_size: 1000
      
      # This processor should be added to the list of processors before
      # the filter/toprovider, and the exporters that write to S3 or to upstream
      # providers, such as Datadog.  It will add attributes to the telemetry
      # which will allow selectively sending metrics on to the upstream
      # provider.  This markup is also written to S3 for later processing
      # by CardinalHQ.
      chqdecorator/l1:
        traces:
          uninteresting_rate: 1000
          has_error_rate: 4

      chqenforcer/intakestats:
        configuration_extension: chqconfig/cardinalhq
        endpoint: {{ .Values.collector.endpoints.cardinalhq.stats }}
        drop_decoration_attributes: false
        statistics:
          phase: presample
          vendor: intakestats

      chqenforcer/cardinalhq:
        configuration_extension: chqconfig/cardinalhq
        endpoint: {{ .Values.collector.endpoints.cardinalhq.stats }}
        drop_decoration_attributes: false
        statistics:
          phase: postsample
          vendor: cardinalhq

      chqenforcer/datadog:
        configuration_extension: chqconfig/cardinalhq
        endpoint: {{ .Values.collector.endpoints.cardinalhq.stats }}
        statistics:
          phase: postsample
          vendor: datadog

    connectors:
      forward/cardinalhq:
      forward/datadog:
      forward/intakestats:
        
    service:
      pipelines:

        # log handling.  No need to partition here.
        logs/l1:
          receivers: [otlp/l1, chqdatadog/l1]
          processors: [memory_limiter/l1, chqdecorator/l1]
          exporters: [forward/intakestats, forward/cardinalhq, forward/datadog]
        logs/intakestats:
          receivers: [forward/intakestats]
          processors: [chqenforcer/cardinalhq]
          exporters: [nop]
        logs/cardinalhq:
          receivers: [forward/cardinalhq]
          processors: [chqenforcer/cardinalhq, batch/cardinalhq]
          exporters: [otlp/cardinalhq]
        logs/datadog:
          receivers: [forward/datadog]
          processors: [chqenforcer/datadog, batch/datadog]
          exporters: [chqdatadog/datadog]

        metrics/l1:
          receivers: [otlp/l1, chqdatadog/l1]
          processors: [memory_limiter/l1]
          exporters: [loadbalancing/metrics]

        traces/l1:
          receivers: [otlp/l1, chqdatadog/l1]
          processors: [memory_limiter/l1]
          exporters: [loadbalancing/traces]

      {{ toYaml .Values.selfTelemetry | nindent 6 }}

      extensions:
        - zpages
        - health_check
        - chqauth/cardinalhq
        - chqconfig/cardinalhq

    extensions:
      zpages:
        endpoint: "0.0.0.0:{{ .Values.collector.endpoints.zpages.port }}"
      health_check:
        endpoint: "0.0.0.0:{{ .Values.collector.endpoints.healthz.port }}"
        path: {{ .Values.collector.endpoints.healthz.path }}
      chqauth/cardinalhq:
        client_auth:
          api_key: ${env:CARDINALHQ_API_KEY}
      chqconfig/cardinalhq:
        source:
          endpoint: {{ .Values.collector.endpoints.cardinalhq.samplerConfig }}
          auth:
            authenticator: chqauth/cardinalhq
